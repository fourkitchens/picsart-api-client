<?php
/**
 * RemoveBackgroundParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Picsart Image Tools API
 *
 * ## Introduction Picsart Image Tools API is a simple HTTP interface. The results are usually the URL of the output image. To get started, first you need to [get your API Key](https://picsart.io/accounts/login). Below you can find the sample codes to get started easily. Reference docs are given with more information about available parameters that can be adjusted.  ## Sample Run ``` curl -X POST \\ 'https://api.picsart.io/tools/1.0/removebg' \\ -H 'x-picsart-api-key: APIKEYHERE' \\ -F 'output_type=cutout' \\ -F 'image_url=https://cdn140.picsart.com/13902645939997000779.jpg' ```  ## Server The demo environment has been removed (https://api.picsart.io/tools/demo/). We recommend that you use the new production environment (https://api.picsart.io/tools/1.0/) instead. Please contact us if you find any issues.  ## API Key To try out our services you will need to  * [create an account](https://picsart.io/accounts/login), * create an app under [My Apps](https://picsart.io/my-apps/) * and get the API key required for authorization.  You can find more details about this process in the [Quickstart](https://picsart.io/api-quickstart).  ## Input File Input images of type JPG, PNG and WEBP are supported. Input image file size is 100 MB max. References to uploaded image files will be valid and can be used within 24 hours.  ## Output Formats You can request one of three formats, JPG, PNG, WEBP, via the format parameter. The result files will be available for use for 24 hours.  ## Rate Limit Users can process up to 100 requests per month during the demo run. When the rate limit is hit, the API will return 429 code with the info:   ```      {        \"fault\": {          \"faultstring\": \"Rate limit quota violation. Quota limit  exceeded. Identifier : _default\",           \"detail\": {             \"errorcode\": \"policies.ratelimit.QuotaViolation\"           }         }      }         ```  ## Authentication Authentication should be done via the provided API Key. API Key can be sent as a header:  ```  curl 'https://api.picsart.io/tools/1.0/effects' -H 'x-picsart-api-key: APIKEY'  ```  [Developer Guidelines](https://picsart.io/terms)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoveBackgroundParameters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoveBackgroundParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RemoveBackgroundParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'output_type' => 'string',
'bg_image' => 'string',
'bg_image_url' => 'string',
'bg_image_id' => 'string',
'bg_color' => 'string',
'bg_blur' => 'int',
'bg_width' => 'int',
'bg_height' => 'int',
'scale' => 'string',
'format' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'output_type' => null,
'bg_image' => 'binary',
'bg_image_url' => null,
'bg_image_id' => null,
'bg_color' => null,
'bg_blur' => null,
'bg_width' => null,
'bg_height' => null,
'scale' => null,
'format' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'output_type' => 'output_type',
'bg_image' => 'bg_image',
'bg_image_url' => 'bg_image_url',
'bg_image_id' => 'bg_image_id',
'bg_color' => 'bg_color',
'bg_blur' => 'bg_blur',
'bg_width' => 'bg_width',
'bg_height' => 'bg_height',
'scale' => 'scale',
'format' => 'format'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'output_type' => 'setOutputType',
'bg_image' => 'setBgImage',
'bg_image_url' => 'setBgImageUrl',
'bg_image_id' => 'setBgImageId',
'bg_color' => 'setBgColor',
'bg_blur' => 'setBgBlur',
'bg_width' => 'setBgWidth',
'bg_height' => 'setBgHeight',
'scale' => 'setScale',
'format' => 'setFormat'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'output_type' => 'getOutputType',
'bg_image' => 'getBgImage',
'bg_image_url' => 'getBgImageUrl',
'bg_image_id' => 'getBgImageId',
'bg_color' => 'getBgColor',
'bg_blur' => 'getBgBlur',
'bg_width' => 'getBgWidth',
'bg_height' => 'getBgHeight',
'scale' => 'getScale',
'format' => 'getFormat'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OUTPUT_TYPE_MASK = 'mask';
const OUTPUT_TYPE_CUTOUT = 'cutout';
const SCALE_FIT = 'fit';
const SCALE_FILL = 'fill';
const FORMAT_JPG = 'JPG';
const FORMAT_PNG = 'PNG';
const FORMAT_WEBP = 'WEBP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutputTypeAllowableValues()
    {
        return [
            self::OUTPUT_TYPE_MASK,
self::OUTPUT_TYPE_CUTOUT,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaleAllowableValues()
    {
        return [
            self::SCALE_FIT,
self::SCALE_FILL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_JPG,
self::FORMAT_PNG,
self::FORMAT_WEBP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['output_type'] = isset($data['output_type']) ? $data['output_type'] : 'cutout';
        $this->container['bg_image'] = isset($data['bg_image']) ? $data['bg_image'] : null;
        $this->container['bg_image_url'] = isset($data['bg_image_url']) ? $data['bg_image_url'] : null;
        $this->container['bg_image_id'] = isset($data['bg_image_id']) ? $data['bg_image_id'] : null;
        $this->container['bg_color'] = isset($data['bg_color']) ? $data['bg_color'] : null;
        $this->container['bg_blur'] = isset($data['bg_blur']) ? $data['bg_blur'] : 0;
        $this->container['bg_width'] = isset($data['bg_width']) ? $data['bg_width'] : null;
        $this->container['bg_height'] = isset($data['bg_height']) ? $data['bg_height'] : null;
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : 'fit';
        $this->container['format'] = isset($data['format']) ? $data['format'] : 'PNG';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOutputTypeAllowableValues();
        if (!is_null($this->container['output_type']) && !in_array($this->container['output_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'output_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScaleAllowableValues();
        if (!is_null($this->container['scale']) && !in_array($this->container['scale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scale', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets output_type
     *
     * @return string
     */
    public function getOutputType()
    {
        return $this->container['output_type'];
    }

    /**
     * Sets output_type
     *
     * @param string $output_type Select one of the two output options. If you submit a photo of a person, **cutout** returns the person as a sticker while **mask** returns a mask photo of the person.
     *
     * @return $this
     */
    public function setOutputType($output_type)
    {
        $allowedValues = $this->getOutputTypeAllowableValues();
        if (!is_null($output_type) && !in_array($output_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'output_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['output_type'] = $output_type;

        return $this;
    }

    /**
     * Gets bg_image
     *
     * @return string
     */
    public function getBgImage()
    {
        return $this->container['bg_image'];
    }

    /**
     * Sets bg_image
     *
     * @param string $bg_image Source image file (binary). (If this parameter is present, the other image source parameters must be empty.) This only has an effect when output=cutout.
     *
     * @return $this
     */
    public function setBgImage($bg_image)
    {
        $this->container['bg_image'] = $bg_image;

        return $this;
    }

    /**
     * Gets bg_image_url
     *
     * @return string
     */
    public function getBgImageUrl()
    {
        return $this->container['bg_image_url'];
    }

    /**
     * Sets bg_image_url
     *
     * @param string $bg_image_url Source image URL. (If this parameter is present, the other image source parameters must be empty.) If this has a value, the output value is dismissed.
     *
     * @return $this
     */
    public function setBgImageUrl($bg_image_url)
    {
        $this->container['bg_image_url'] = $bg_image_url;

        return $this;
    }

    /**
     * Gets bg_image_id
     *
     * @return string
     */
    public function getBgImageId()
    {
        return $this->container['bg_image_id'];
    }

    /**
     * Sets bg_image_id
     *
     * @param string $bg_image_id Source image ID of an image previously uploaded to Picsart or result image ID from a different API. (If this parameter is present, the other image source parameters must be empty.) See /upload method. If this has a value, the output value is dismissed.
     *
     * @return $this
     */
    public function setBgImageId($bg_image_id)
    {
        $this->container['bg_image_id'] = $bg_image_id;

        return $this;
    }

    /**
     * Gets bg_color
     *
     * @return string
     */
    public function getBgColor()
    {
        return $this->container['bg_color'];
    }

    /**
     * Sets bg_color
     *
     * @param string $bg_color Can be a hexcolor code (e.g., #82d5fa, #fff) or a color name (e.g., blue). For semi-transparency, 4-/8-digit hexcodes are also supported (e.g., #18d4ff87). (If this parameter is present, the other bg_ parameters must be empty).
     *
     * @return $this
     */
    public function setBgColor($bg_color)
    {
        $this->container['bg_color'] = $bg_color;

        return $this;
    }

    /**
     * Gets bg_blur
     *
     * @return int
     */
    public function getBgBlur()
    {
        return $this->container['bg_blur'];
    }

    /**
     * Sets bg_blur
     *
     * @param int $bg_blur Enter an integer value from 0 to +100.
     *
     * @return $this
     */
    public function setBgBlur($bg_blur)
    {
        $this->container['bg_blur'] = $bg_blur;

        return $this;
    }

    /**
     * Gets bg_width
     *
     * @return int
     */
    public function getBgWidth()
    {
        return $this->container['bg_width'];
    }

    /**
     * Sets bg_width
     *
     * @param int $bg_width Size, in pixels, for the width. If left blank, the background is left at its original width.
     *
     * @return $this
     */
    public function setBgWidth($bg_width)
    {
        $this->container['bg_width'] = $bg_width;

        return $this;
    }

    /**
     * Gets bg_height
     *
     * @return int
     */
    public function getBgHeight()
    {
        return $this->container['bg_height'];
    }

    /**
     * Sets bg_height
     *
     * @param int $bg_height Size, in pixels, for the height. If left blank, the background is left at its original height.
     *
     * @return $this
     */
    public function setBgHeight($bg_height)
    {
        $this->container['bg_height'] = $bg_height;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return string
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param string $scale Fit is where the longer side (width/height) fits the background. Fill is where the shorter side fits the background. Fit is the default.
     *
     * @return $this
     */
    public function setScale($scale)
    {
        $allowedValues = $this->getScaleAllowableValues();
        if (!is_null($scale) && !in_array($scale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scale', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Optionally select one of the image formats (PNG is chosen if left blank). Options are as follows:   * JPG   * PNG   * WEBP
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($format) && !in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
