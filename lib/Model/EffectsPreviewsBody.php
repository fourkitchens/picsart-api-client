<?php
/**
 * EffectsPreviewsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Picsart Image Tools API
 *
 * ## Introduction Picsart Image Tools API is a simple HTTP interface. The results are usually the URL of the output image. To get started, first you need to [get your API Key](https://picsart.io/accounts/login). Below you can find the sample codes to get started easily. Reference docs are given with more information about available parameters that can be adjusted.  ## Sample Run ``` curl -X POST \\ 'https://api.picsart.io/tools/1.0/removebg' \\ -H 'x-picsart-api-key: APIKEYHERE' \\ -F 'output_type=cutout' \\ -F 'image_url=https://cdn140.picsart.com/13902645939997000779.jpg' ```  ## Server The demo environment has been removed (https://api.picsart.io/tools/demo/). We recommend that you use the new production environment (https://api.picsart.io/tools/1.0/) instead. Please contact us if you find any issues.  ## API Key To try out our services you will need to  * [create an account](https://picsart.io/accounts/login), * create an app under [My Apps](https://picsart.io/my-apps/) * and get the API key required for authorization.  You can find more details about this process in the [Quickstart](https://picsart.io/api-quickstart).  ## Input File Input images of type JPG, PNG and WEBP are supported. Input image file size is 100 MB max. References to uploaded image files will be valid and can be used within 24 hours.  ## Output Formats You can request one of three formats, JPG, PNG, WEBP, via the format parameter. The result files will be available for use for 24 hours.  ## Rate Limit Users can process up to 100 requests per month during the demo run. When the rate limit is hit, the API will return 429 code with the info:   ```      {        \"fault\": {          \"faultstring\": \"Rate limit quota violation. Quota limit  exceeded. Identifier : _default\",           \"detail\": {             \"errorcode\": \"policies.ratelimit.QuotaViolation\"           }         }      }         ```  ## Authentication Authentication should be done via the provided API Key. API Key can be sent as a header:  ```  curl 'https://api.picsart.io/tools/1.0/effects' -H 'x-picsart-api-key: APIKEY'  ```  [Developer Guidelines](https://picsart.io/terms)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * EffectsPreviewsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EffectsPreviewsBody extends ImageParameters 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'effects_previews_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'effect_names' => 'string[]',
'preview_size' => 'int',
'format' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'effect_names' => null,
'preview_size' => null,
'format' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'effect_names' => 'effect_names',
'preview_size' => 'preview_size',
'format' => 'format'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'effect_names' => 'setEffectNames',
'preview_size' => 'setPreviewSize',
'format' => 'setFormat'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'effect_names' => 'getEffectNames',
'preview_size' => 'getPreviewSize',
'format' => 'getFormat'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EFFECT_NAMES_ICY1 = 'icy1';
const EFFECT_NAMES_ICY2 = 'icy2';
const EFFECT_NAMES_ICY3 = 'icy3';
const EFFECT_NAMES_BRNZ1 = 'brnz1';
const EFFECT_NAMES_BRNZ2 = 'brnz2';
const EFFECT_NAMES_BRNZ3 = 'brnz3';
const EFFECT_NAMES_MNCH1 = 'mnch1';
const EFFECT_NAMES_MNCH2 = 'mnch2';
const EFFECT_NAMES_MNCH3 = 'mnch3';
const EFFECT_NAMES_NOISE = 'noise';
const EFFECT_NAMES_SATURATION = 'saturation';
const EFFECT_NAMES_CYBER1 = 'cyber1';
const EFFECT_NAMES_CYBER2 = 'cyber2';
const EFFECT_NAMES_FOOD1 = 'food1';
const EFFECT_NAMES_FOOD2 = 'food2';
const EFFECT_NAMES_NATURE1 = 'nature1';
const EFFECT_NAMES_NATURE2 = 'nature2';
const EFFECT_NAMES_URBAN1 = 'urban1';
const EFFECT_NAMES_URBAN2 = 'urban2';
const EFFECT_NAMES_WATER1 = 'water1';
const EFFECT_NAMES_WATER2 = 'water2';
const EFFECT_NAMES_SHADOW1 = 'shadow1';
const EFFECT_NAMES_SHADOW2 = 'shadow2';
const EFFECT_NAMES_SKETCHER2 = 'sketcher2';
const FORMAT_JPG = 'JPG';
const FORMAT_PNG = 'PNG';
const FORMAT_WEBP = 'WEBP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEffectNamesAllowableValues()
    {
        return [
            self::EFFECT_NAMES_ICY1,
self::EFFECT_NAMES_ICY2,
self::EFFECT_NAMES_ICY3,
self::EFFECT_NAMES_BRNZ1,
self::EFFECT_NAMES_BRNZ2,
self::EFFECT_NAMES_BRNZ3,
self::EFFECT_NAMES_MNCH1,
self::EFFECT_NAMES_MNCH2,
self::EFFECT_NAMES_MNCH3,
self::EFFECT_NAMES_NOISE,
self::EFFECT_NAMES_SATURATION,
self::EFFECT_NAMES_CYBER1,
self::EFFECT_NAMES_CYBER2,
self::EFFECT_NAMES_FOOD1,
self::EFFECT_NAMES_FOOD2,
self::EFFECT_NAMES_NATURE1,
self::EFFECT_NAMES_NATURE2,
self::EFFECT_NAMES_URBAN1,
self::EFFECT_NAMES_URBAN2,
self::EFFECT_NAMES_WATER1,
self::EFFECT_NAMES_WATER2,
self::EFFECT_NAMES_SHADOW1,
self::EFFECT_NAMES_SHADOW2,
self::EFFECT_NAMES_SKETCHER2,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_JPG,
self::FORMAT_PNG,
self::FORMAT_WEBP,        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['effect_names'] = isset($data['effect_names']) ? $data['effect_names'] : null;
        $this->container['preview_size'] = isset($data['preview_size']) ? $data['preview_size'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : 'JPG';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['effect_names'] === null) {
            $invalidProperties[] = "'effect_names' can't be null";
        }
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets effect_names
     *
     * @return string[]
     */
    public function getEffectNames()
    {
        return $this->container['effect_names'];
    }

    /**
     * Sets effect_names
     *
     * @param string[] $effect_names Select up to 10 effects to preview by holding down the Ctrl key. The list of effects are as follows:   * icy1   * icy2   * icy3   * brnz1   * brnz2   * brnz3   * mnch1   * mnch2   * mnch3   * noise   * saturation   * cyber1   * cyber2   * food1   * food2   * nature1   * nature2   * urban1   * urban2   * water1   * water2   * shadow1   * shadow2   * sketcher1   * sketcher2
     *
     * @return $this
     */
    public function setEffectNames($effect_names)
    {
        $allowedValues = $this->getEffectNamesAllowableValues();
        if (array_diff($effect_names, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'effect_names', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['effect_names'] = $effect_names;

        return $this;
    }

    /**
     * Gets preview_size
     *
     * @return int
     */
    public function getPreviewSize()
    {
        return $this->container['preview_size'];
    }

    /**
     * Sets preview_size
     *
     * @param int $preview_size Enter the width of the preview image. The max value is 240px. The default is 120px.
     *
     * @return $this
     */
    public function setPreviewSize($preview_size)
    {
        $this->container['preview_size'] = $preview_size;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Optionally select one of the image formats (JPG is default). Options are as follows:   * JPG   * PNG   * WEBP
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($format) && !in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
